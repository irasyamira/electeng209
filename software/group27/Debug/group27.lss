
group27.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000a98  00000b2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800104  00800104  00000b30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000809  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000033a  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000329  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028f  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e8  00000000  00000000  00001e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002873  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 01 	call	0x354	; 0x354 <main>
  9e:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:
//volatile float power = 0.0;	

/*enables and initializes the UART*/
void uart_init(uint16_t MYUBRR)
{
	UBRR0H = (MYUBRR>>8);				//Set baud rate using register UBRR0H and UBRR0L
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = MYUBRR;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= (1<<TXEN0);				//Enable transmitter
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01);	//Select 8-bit frame, single stop bit and no parity	
  b8:	e2 ec       	ldi	r30, 0xC2	; 194
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	86 60       	ori	r24, 0x06	; 6
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <uart_transmit>:

/*transmits the packet of data encoded to the CPLD*/
void uart_transmit(uint8_t data)
{
	while (!(1<<UDRE0) && (UCSR0A));	//checking the registers
	UDR0 = data;
  c4:	80 93 c6 00 	sts	0x00C6, r24
  c8:	08 95       	ret

000000ca <adc_init>:
* capture mode with interrupt enables, result right justified*/
void adc_init( )
{

	/** Setup and enable ADC **/
	ADMUX |=	(0<<REFS1)|				// Reference Selection Bits
  ca:	ec e7       	ldi	r30, 0x7C	; 124
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
				(0<<ADLAR)|				// ADC Left Adjust Result
				(0<<MUX2)|				// Analog Channel Selection Bits
				(0<<MUX1)|				// ADC2 (PC2 PIN25)
				(0<<MUX0);
	
	ADCSRA =	(1<<ADEN)|				// ADC Enable
  d4:	86 ec       	ldi	r24, 0xC6	; 198
  d6:	80 93 7a 00 	sts	0x007A, r24
  da:	08 95       	ret

000000dc <encode>:
}

/*encodes a float num to its respective 4 numbers in decimal to be transmitted
* to the CPLD*/
void encode(float num)
{
  dc:	8f 92       	push	r8
  de:	9f 92       	push	r9
  e0:	af 92       	push	r10
  e2:	bf 92       	push	r11
  e4:	cf 92       	push	r12
  e6:	df 92       	push	r13
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	6b 01       	movw	r12, r22
  f6:	7c 01       	movw	r14, r24
	int dec1 = 0;
	int dec2 = 0;
	int dec3 = 0;						
	int num1, num2, num3, num4;

	if ((num/10.0) < 1) {
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 e2       	ldi	r20, 0x20	; 32
  fe:	51 e4       	ldi	r21, 0x41	; 65
 100:	0e 94 56 03 	call	0x6ac	; 0x6ac <__divsf3>
 104:	4b 01       	movw	r8, r22
 106:	5c 01       	movw	r10, r24
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	40 e8       	ldi	r20, 0x80	; 128
 10e:	5f e3       	ldi	r21, 0x3F	; 63
 110:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__cmpsf2>
 114:	88 23       	and	r24, r24
 116:	fc f4       	brge	.+62     	; 0x156 <encode+0x7a>
		dec1 = 1;
		num = num*1000;
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	4a e7       	ldi	r20, 0x7A	; 122
 11e:	54 e4       	ldi	r21, 0x44	; 68
 120:	c7 01       	movw	r24, r14
 122:	b6 01       	movw	r22, r12
 124:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3>
		num = num*10;
	} else {							//((num/10.0) < 1000)
		num = num*1;
	}

	int intNum = (int)num;				//change num from float to int
 128:	0e 94 c8 03 	call	0x790	; 0x790 <__fixsfsi>
	
	/*start modulus calculation to hard code and transmit by breaking down the 4digit number into
	* separate digits with decimal point assigned (if applicable)*/
	num1 = intNum/1000;					
 12c:	cb 01       	movw	r24, r22
 12e:	68 ee       	ldi	r22, 0xE8	; 232
 130:	73 e0       	ldi	r23, 0x03	; 3
 132:	0e 94 22 05 	call	0xa44	; 0xa44 <__divmodhi4>
	if (dec1 == 1) {
		numArray[0] = (num1 + 112);		//store values in an array of 4 elements for 4 digits
 136:	60 59       	subi	r22, 0x90	; 144
 138:	7f 4f       	sbci	r23, 0xFF	; 255
 13a:	70 93 10 01 	sts	0x0110, r23
 13e:	60 93 0f 01 	sts	0x010F, r22
		} else {
		numArray[0] = (num1 + 96);
	}
	intNum = intNum%1000;
 142:	28 2f       	mov	r18, r24
 144:	39 2f       	mov	r19, r25
	num2 = intNum/100;
 146:	64 e6       	ldi	r22, 0x64	; 100
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 22 05 	call	0xa44	; 0xa44 <__divmodhi4>
 14e:	cb 01       	movw	r24, r22
void encode(float num)
{
	//to flag for decimal point
	int dec1 = 0;
	int dec2 = 0;
	int dec3 = 0;						
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	3a c0       	rjmp	.+116    	; 0x1ca <encode+0xee>
	int num1, num2, num3, num4;

	if ((num/10.0) < 1) {
		dec1 = 1;
		num = num*1000;
	} else if ((num/10.0) < 10) {
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	40 e2       	ldi	r20, 0x20	; 32
 15c:	51 e4       	ldi	r21, 0x41	; 65
 15e:	c5 01       	movw	r24, r10
 160:	b4 01       	movw	r22, r8
 162:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__cmpsf2>
 166:	88 23       	and	r24, r24
 168:	7c f4       	brge	.+30     	; 0x188 <encode+0xac>
	dec2 = 1;
		num = num*100;
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	48 ec       	ldi	r20, 0xC8	; 200
 170:	52 e4       	ldi	r21, 0x42	; 66
 172:	c7 01       	movw	r24, r14
 174:	b6 01       	movw	r22, r12
 176:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3>
 17a:	6b 01       	movw	r12, r22
 17c:	7c 01       	movw	r14, r24
void encode(float num)
{
	//to flag for decimal point
	int dec1 = 0;
	int dec2 = 0;
	int dec3 = 0;						
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	d0 e0       	ldi	r29, 0x00	; 0

	if ((num/10.0) < 1) {
		dec1 = 1;
		num = num*1000;
	} else if ((num/10.0) < 10) {
	dec2 = 1;
 182:	01 e0       	ldi	r16, 0x01	; 1
 184:	10 e0       	ldi	r17, 0x00	; 0
 186:	4f c0       	rjmp	.+158    	; 0x226 <encode+0x14a>
		num = num*100;
	} else if ((num/10.0) < 100) {
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	48 ec       	ldi	r20, 0xC8	; 200
 18e:	52 e4       	ldi	r21, 0x42	; 66
 190:	c5 01       	movw	r24, r10
 192:	b4 01       	movw	r22, r8
 194:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__cmpsf2>
 198:	88 23       	and	r24, r24
 19a:	0c f0       	brlt	.+2      	; 0x19e <encode+0xc2>
 19c:	40 c0       	rjmp	.+128    	; 0x21e <encode+0x142>
		dec3 = 1;
		num = num*10;
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e2       	ldi	r20, 0x20	; 32
 1a4:	51 e4       	ldi	r21, 0x41	; 65
 1a6:	c7 01       	movw	r24, r14
 1a8:	b6 01       	movw	r22, r12
 1aa:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3>
 1ae:	6b 01       	movw	r12, r22
 1b0:	7c 01       	movw	r14, r24
		num = num*1000;
	} else if ((num/10.0) < 10) {
	dec2 = 1;
		num = num*100;
	} else if ((num/10.0) < 100) {
		dec3 = 1;
 1b2:	c1 e0       	ldi	r28, 0x01	; 1
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
* to the CPLD*/
void encode(float num)
{
	//to flag for decimal point
	int dec1 = 0;
	int dec2 = 0;
 1b6:	00 e0       	ldi	r16, 0x00	; 0
 1b8:	10 e0       	ldi	r17, 0x00	; 0
 1ba:	35 c0       	rjmp	.+106    	; 0x226 <encode+0x14a>
		numArray[0] = (num1 + 96);
	}
	intNum = intNum%1000;
	num2 = intNum/100;
	if (dec2 == 1) {
		numArray[1] = (num2 + 80);
 1bc:	60 5b       	subi	r22, 0xB0	; 176
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
 1c0:	70 93 12 01 	sts	0x0112, r23
 1c4:	60 93 11 01 	sts	0x0111, r22
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <encode+0xfa>
		} else {
		numArray[1] = (num2 + 64);
 1ca:	80 5c       	subi	r24, 0xC0	; 192
 1cc:	9f 4f       	sbci	r25, 0xFF	; 255
 1ce:	90 93 12 01 	sts	0x0112, r25
 1d2:	80 93 11 01 	sts	0x0111, r24
	}
	intNum = intNum%100;
 1d6:	82 2f       	mov	r24, r18
 1d8:	93 2f       	mov	r25, r19
 1da:	64 e6       	ldi	r22, 0x64	; 100
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	0e 94 22 05 	call	0xa44	; 0xa44 <__divmodhi4>
 1e2:	9c 01       	movw	r18, r24
	num3 = intNum/10;
 1e4:	6a e0       	ldi	r22, 0x0A	; 10
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0e 94 22 05 	call	0xa44	; 0xa44 <__divmodhi4>
	if (dec3 == 1) {
 1ec:	21 97       	sbiw	r28, 0x01	; 1
 1ee:	39 f4       	brne	.+14     	; 0x1fe <encode+0x122>
		numArray[2] = (num3 + 48);
 1f0:	60 5d       	subi	r22, 0xD0	; 208
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	70 93 14 01 	sts	0x0114, r23
 1f8:	60 93 13 01 	sts	0x0113, r22
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <encode+0x12e>
		} else {
		numArray[2] = (num3 + 32);
 1fe:	60 5e       	subi	r22, 0xE0	; 224
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	70 93 14 01 	sts	0x0114, r23
 206:	60 93 13 01 	sts	0x0113, r22
	}
	num4 = intNum%10;
 20a:	c9 01       	movw	r24, r18
 20c:	6a e0       	ldi	r22, 0x0A	; 10
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	0e 94 22 05 	call	0xa44	; 0xa44 <__divmodhi4>
	numArray[3] = (num4);
 214:	90 93 16 01 	sts	0x0116, r25
 218:	80 93 15 01 	sts	0x0115, r24
 21c:	1f c0       	rjmp	.+62     	; 0x25c <encode+0x180>
void encode(float num)
{
	//to flag for decimal point
	int dec1 = 0;
	int dec2 = 0;
	int dec3 = 0;						
 21e:	c0 e0       	ldi	r28, 0x00	; 0
 220:	d0 e0       	ldi	r29, 0x00	; 0
* to the CPLD*/
void encode(float num)
{
	//to flag for decimal point
	int dec1 = 0;
	int dec2 = 0;
 222:	00 e0       	ldi	r16, 0x00	; 0
 224:	10 e0       	ldi	r17, 0x00	; 0
		num = num*10;
	} else {							//((num/10.0) < 1000)
		num = num*1;
	}

	int intNum = (int)num;				//change num from float to int
 226:	c7 01       	movw	r24, r14
 228:	b6 01       	movw	r22, r12
 22a:	0e 94 c8 03 	call	0x790	; 0x790 <__fixsfsi>
	
	/*start modulus calculation to hard code and transmit by breaking down the 4digit number into
	* separate digits with decimal point assigned (if applicable)*/
	num1 = intNum/1000;					
 22e:	cb 01       	movw	r24, r22
 230:	68 ee       	ldi	r22, 0xE8	; 232
 232:	73 e0       	ldi	r23, 0x03	; 3
 234:	0e 94 22 05 	call	0xa44	; 0xa44 <__divmodhi4>
	if (dec1 == 1) {
		numArray[0] = (num1 + 112);		//store values in an array of 4 elements for 4 digits
		} else {
		numArray[0] = (num1 + 96);
 238:	60 5a       	subi	r22, 0xA0	; 160
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	70 93 10 01 	sts	0x0110, r23
 240:	60 93 0f 01 	sts	0x010F, r22
	}
	intNum = intNum%1000;
 244:	28 2f       	mov	r18, r24
 246:	39 2f       	mov	r19, r25
	num2 = intNum/100;
 248:	64 e6       	ldi	r22, 0x64	; 100
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	0e 94 22 05 	call	0xa44	; 0xa44 <__divmodhi4>
 250:	cb 01       	movw	r24, r22
	if (dec2 == 1) {
 252:	01 30       	cpi	r16, 0x01	; 1
 254:	11 05       	cpc	r17, r1
 256:	09 f0       	breq	.+2      	; 0x25a <encode+0x17e>
 258:	b8 cf       	rjmp	.-144    	; 0x1ca <encode+0xee>
 25a:	b0 cf       	rjmp	.-160    	; 0x1bc <encode+0xe0>
		numArray[2] = (num3 + 32);
	}
	num4 = intNum%10;
	numArray[3] = (num4);

}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	df 90       	pop	r13
 26a:	cf 90       	pop	r12
 26c:	bf 90       	pop	r11
 26e:	af 90       	pop	r10
 270:	9f 90       	pop	r9
 272:	8f 90       	pop	r8
 274:	08 95       	ret

00000276 <adc_read>:
* has been initialized to input*/
int adc_read(uint8_t channel)
{
	uint16_t adc_value;

	ADMUX	&= 0x00;					//clears the channel that was previously read
 276:	ec e7       	ldi	r30, 0x7C	; 124
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	90 81       	ld	r25, Z
 27c:	10 82       	st	Z, r1
	ADMUX	|= channel;					//set to new ADC channel to be read (from function input)
 27e:	90 81       	ld	r25, Z
 280:	89 2b       	or	r24, r25
 282:	80 83       	st	Z, r24
	ADMUX	|=	(1<<REFS0);				//reset the Vref because has been cleared in previous channel assignment
 284:	80 81       	ld	r24, Z
 286:	80 64       	ori	r24, 0x40	; 64
 288:	80 83       	st	Z, r24
	ADCSRA	|=	(1 << ADSC);			//starts a new conversion
 28a:	ea e7       	ldi	r30, 0x7A	; 122
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));		//wait for completion of ADC conversion
 294:	80 81       	ld	r24, Z
 296:	86 fd       	sbrc	r24, 6
 298:	fd cf       	rjmp	.-6      	; 0x294 <adc_read+0x1e>
	adc_value = ADC;					//assign variable to pass ADC value
 29a:	80 91 78 00 	lds	r24, 0x0078
 29e:	90 91 79 00 	lds	r25, 0x0079
	return (adc_value);					//returns the value from the ADC channel 0

}
 2a2:	08 95       	ret

000002a4 <calculate_adc>:

/*calculates the input voltage value applied at ADC0 channel by multiplying it
* with step size, and stores the result in a variable of type float or double*/
float calculate_adc(uint16_t adc_value)
{
 2a4:	cf 92       	push	r12
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	ec 01       	movw	r28, r24
	float Vin;
	stepsize = Vref/1024.0;
 2b2:	c0 90 00 01 	lds	r12, 0x0100
 2b6:	d0 90 01 01 	lds	r13, 0x0101
 2ba:	e0 90 02 01 	lds	r14, 0x0102
 2be:	f0 90 03 01 	lds	r15, 0x0103
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	40 e8       	ldi	r20, 0x80	; 128
 2c8:	5a e3       	ldi	r21, 0x3A	; 58
 2ca:	c7 01       	movw	r24, r14
 2cc:	b6 01       	movw	r22, r12
 2ce:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3>
 2d2:	60 93 08 01 	sts	0x0108, r22
 2d6:	70 93 09 01 	sts	0x0109, r23
 2da:	80 93 0a 01 	sts	0x010A, r24
 2de:	90 93 0b 01 	sts	0x010B, r25
	Vin = adc_value*stepsize;
	Vin = (adc_value * Vref)/1024.0;
 2e2:	be 01       	movw	r22, r28
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__floatunsisf>
 2ec:	9b 01       	movw	r18, r22
 2ee:	ac 01       	movw	r20, r24
 2f0:	c7 01       	movw	r24, r14
 2f2:	b6 01       	movw	r22, r12
 2f4:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3>
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e8       	ldi	r20, 0x80	; 128
 2fe:	5a e3       	ldi	r21, 0x3A	; 58
 300:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3>
	return Vin;
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	df 90       	pop	r13
 30e:	cf 90       	pop	r12
 310:	08 95       	ret

00000312 <calculate_power>:

/*multiplies the values of V and I in the two arrays and storing the calculated values
* in a power array to be passed to another function which will be calculating its average value*/
float calculate_power(float v, float i)
{
	return v*i;
 312:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3>
}
 316:	08 95       	ret

00000318 <timer0_init>:
/*enables and initializes timer0 with pre scaler of 1024, initializing counter to 0
* with enabled overflow interrupt, enabled global interrupt, and initialized
* overflow counter variable*/
void timer0_init()
{
	TCCR0B |= (1 << CS02) | (1<<CS00);	//set up timer with pre scaler = 1024
 318:	85 b5       	in	r24, 0x25	; 37
 31a:	85 60       	ori	r24, 0x05	; 5
 31c:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;							//initialize counter
 31e:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0);				//enable overflow interrupt
 320:	ee e6       	ldi	r30, 0x6E	; 110
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	81 60       	ori	r24, 0x01	; 1
 328:	80 83       	st	Z, r24
	sei();								//enable global interrupts
 32a:	78 94       	sei
	tot_overflow = 0;					//initialize overflow counter variable
 32c:	10 92 0e 01 	sts	0x010E, r1
 330:	08 95       	ret

00000332 <__vector_16>:
}

/*this Interrupt Service Routine keeps track of the number of overflows
* when timer0 is set to count up to more than 16.32ms*/
ISR(TIMER0_OVF_vect)
{
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	8f 93       	push	r24
	tot_overflow++;
 33e:	80 91 0e 01 	lds	r24, 0x010E
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 0e 01 	sts	0x010E, r24
}
 348:	8f 91       	pop	r24
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <main>:

volatile uint8_t tot_overflow;
int numArray[4];

int main(void)
{
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	28 97       	sbiw	r28, 0x08	; 8
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
	float power = 0.0;								//initialize power variable
	float voltage = 0.0, current = 0.0;				//initialize V peak and I peak variables
	uint16_t BAUD = (F_CPU/BAUDRATE/16) - 1;		//set BAUD rate
	uart_init (BAUD);
 368:	87 e6       	ldi	r24, 0x67	; 103
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_init>
	adc_init();										//initialize ADC
 370:	0e 94 65 00 	call	0xca	; 0xca <adc_init>
	DDRB |= (1 << 5);								//connect led to pin PC5
 374:	25 9a       	sbi	0x04, 5	; 4
	
	timer0_init();									//initialize timer
 376:	0e 94 8c 01 	call	0x318	; 0x318 <timer0_init>
 37a:	07 e1       	ldi	r16, 0x17	; 23
 37c:	11 e0       	ldi	r17, 0x01	; 1
 37e:	0f 2e       	mov	r0, r31
 380:	ff e0       	ldi	r31, 0x0F	; 15
 382:	cf 2e       	mov	r12, r31
 384:	f1 e0       	ldi	r31, 0x01	; 1
 386:	df 2e       	mov	r13, r31
 388:	f0 2d       	mov	r31, r0
				{
					uart_transmit(numArray[k]);
					_delay_ms(5);
				}
			}
			tot_overflow = 122;
 38a:	0f 2e       	mov	r0, r31
 38c:	fa e7       	ldi	r31, 0x7A	; 122
 38e:	4f 2e       	mov	r4, r31
 390:	f0 2d       	mov	r31, r0
				{
					uart_transmit(numArray[k]);
					_delay_ms(5);
				}
			}
			tot_overflow = 244;
 392:	0f 2e       	mov	r0, r31
 394:	f4 ef       	ldi	r31, 0xF4	; 244
 396:	5f 2e       	mov	r5, r31
 398:	f0 2d       	mov	r31, r0
					PORTB ^= (1 << 5);		//toggles the led every 1s
					TCNT0 = 0;				//reset counter
					tot_overflow = 0;		//reset overflow counter
				}
			}
		} else if ((power < 4.25) & (power >= 2.125)) { //20% < power < 50%
 39a:	77 24       	eor	r7, r7
 39c:	73 94       	inc	r7
			//delay 0.333s
			if (tot_overflow >= 15)
			{
				if (TCNT0 >= 250)
				{
					PORTB ^= (1 << 5);    //toggles the led every 0.33s
 39e:	68 94       	set
 3a0:	66 24       	eor	r6, r6
 3a2:	65 f8       	bld	r6, 5
	
	while(1)
	{

		//reading V peak from PC3
		voltage = adc_read(3);
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	0e 94 3b 01 	call	0x276	; 0x276 <adc_read>
		float Vpk = calculate_adc(voltage);
 3aa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <calculate_adc>
		float Vrms = (Vpk - 0.2)*(192/(sqrt(2)*12));
 3ae:	2d ec       	ldi	r18, 0xCD	; 205
 3b0:	3c ec       	ldi	r19, 0xCC	; 204
 3b2:	4c e4       	ldi	r20, 0x4C	; 76
 3b4:	5e e3       	ldi	r21, 0x3E	; 62
 3b6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__subsf3>
 3ba:	24 ef       	ldi	r18, 0xF4	; 244
 3bc:	34 e0       	ldi	r19, 0x04	; 4
 3be:	45 e3       	ldi	r20, 0x35	; 53
 3c0:	51 e4       	ldi	r21, 0x41	; 65
 3c2:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3>
 3c6:	69 83       	std	Y+1, r22	; 0x01
 3c8:	7a 83       	std	Y+2, r23	; 0x02
 3ca:	8b 83       	std	Y+3, r24	; 0x03
 3cc:	9c 83       	std	Y+4, r25	; 0x04

		//reading I peak from PC0
		current = adc_read(0);
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 3b 01 	call	0x276	; 0x276 <adc_read>
		float Ipk = calculate_adc(current);
 3d4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <calculate_adc>
		float Irms = Ipk / (2*(sqrt(2))*0.33);
 3d8:	2e e0       	ldi	r18, 0x0E	; 14
 3da:	32 ef       	ldi	r19, 0xF2	; 242
 3dc:	4e e6       	ldi	r20, 0x6E	; 110
 3de:	5f e3       	ldi	r21, 0x3F	; 63
 3e0:	0e 94 56 03 	call	0x6ac	; 0x6ac <__divsf3>
 3e4:	6d 83       	std	Y+5, r22	; 0x05
 3e6:	7e 83       	std	Y+6, r23	; 0x06
 3e8:	8f 83       	std	Y+7, r24	; 0x07
 3ea:	98 87       	std	Y+8, r25	; 0x08
		
		power = calculate_power(Vrms,Irms);
 3ec:	9b 01       	movw	r18, r22
 3ee:	ac 01       	movw	r20, r24
 3f0:	69 81       	ldd	r22, Y+1	; 0x01
 3f2:	7a 81       	ldd	r23, Y+2	; 0x02
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	9c 81       	ldd	r25, Y+4	; 0x04
 3f8:	0e 94 89 01 	call	0x312	; 0x312 <calculate_power>
 3fc:	4b 01       	movw	r8, r22
 3fe:	5c 01       	movw	r10, r24

		/* first 2s, tot_oveflow < 122, displays the voltage. 
		* the next 2s, 122 < tot_overflow < 244, displays the current
		* next 2s tot_overflow > 244, displays the calculated power */
		if (tot_overflow >= 244)				//approximately 4s
 400:	80 91 0e 01 	lds	r24, 0x010E
 404:	84 3f       	cpi	r24, 0xF4	; 244
 406:	18 f1       	brcs	.+70     	; 0x44e <main+0xfa>
		{
			encode(power);
 408:	c5 01       	movw	r24, r10
 40a:	b4 01       	movw	r22, r8
 40c:	0e 94 6e 00 	call	0xdc	; 0xdc <encode>
 410:	0f 2e       	mov	r0, r31
 412:	f0 e5       	ldi	r31, 0x50	; 80
 414:	ef 2e       	mov	r14, r31
 416:	f1 2c       	mov	r15, r1
 418:	f0 2d       	mov	r31, r0
 41a:	14 c0       	rjmp	.+40     	; 0x444 <main+0xf0>
			for (int j = 0; j < 80; j++)
			{
				for (int k = 0 ; k<4 ; k++)
				{
					uart_transmit(numArray[k]);
 41c:	f1 01       	movw	r30, r2
 41e:	80 81       	ld	r24, Z
 420:	f2 e0       	ldi	r31, 0x02	; 2
 422:	2f 0e       	add	r2, r31
 424:	31 1c       	adc	r3, r1
 426:	0e 94 62 00 	call	0xc4	; 0xc4 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42a:	8f e1       	ldi	r24, 0x1F	; 31
 42c:	9e e4       	ldi	r25, 0x4E	; 78
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <main+0xda>
 432:	00 c0       	rjmp	.+0      	; 0x434 <main+0xe0>
 434:	00 00       	nop
		if (tot_overflow >= 244)				//approximately 4s
		{
			encode(power);
			for (int j = 0; j < 80; j++)
			{
				for (int k = 0 ; k<4 ; k++)
 436:	20 16       	cp	r2, r16
 438:	31 06       	cpc	r3, r17
 43a:	81 f7       	brne	.-32     	; 0x41c <main+0xc8>
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	e9 1a       	sub	r14, r25
 440:	f1 08       	sbc	r15, r1
		* the next 2s, 122 < tot_overflow < 244, displays the current
		* next 2s tot_overflow > 244, displays the calculated power */
		if (tot_overflow >= 244)				//approximately 4s
		{
			encode(power);
			for (int j = 0; j < 80; j++)
 442:	11 f0       	breq	.+4      	; 0x448 <main+0xf4>
 444:	16 01       	movw	r2, r12
 446:	ea cf       	rjmp	.-44     	; 0x41c <main+0xc8>
				{
					uart_transmit(numArray[k]);
					_delay_ms(5);
				}
			} 
			tot_overflow = 0;
 448:	10 92 0e 01 	sts	0x010E, r1
 44c:	4d c0       	rjmp	.+154    	; 0x4e8 <main+0x194>
		}
		else if (tot_overflow >= 122)			//approximately 2s
 44e:	80 91 0e 01 	lds	r24, 0x010E
 452:	8a 37       	cpi	r24, 0x7A	; 122
 454:	28 f1       	brcs	.+74     	; 0x4a0 <main+0x14c>
		{
			encode(Irms);
 456:	6d 81       	ldd	r22, Y+5	; 0x05
 458:	7e 81       	ldd	r23, Y+6	; 0x06
 45a:	8f 81       	ldd	r24, Y+7	; 0x07
 45c:	98 85       	ldd	r25, Y+8	; 0x08
 45e:	0e 94 6e 00 	call	0xdc	; 0xdc <encode>
 462:	0f 2e       	mov	r0, r31
 464:	f0 e5       	ldi	r31, 0x50	; 80
 466:	ef 2e       	mov	r14, r31
 468:	f1 2c       	mov	r15, r1
 46a:	f0 2d       	mov	r31, r0
 46c:	14 c0       	rjmp	.+40     	; 0x496 <main+0x142>
			for (int j = 0; j < 80; j++)
			{
				for (int k = 0 ; k<4 ; k++)
				{
					uart_transmit(numArray[k]);
 46e:	f1 01       	movw	r30, r2
 470:	80 81       	ld	r24, Z
 472:	f2 e0       	ldi	r31, 0x02	; 2
 474:	2f 0e       	add	r2, r31
 476:	31 1c       	adc	r3, r1
 478:	0e 94 62 00 	call	0xc4	; 0xc4 <uart_transmit>
 47c:	8f e1       	ldi	r24, 0x1F	; 31
 47e:	9e e4       	ldi	r25, 0x4E	; 78
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <main+0x12c>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0x132>
 486:	00 00       	nop
		else if (tot_overflow >= 122)			//approximately 2s
		{
			encode(Irms);
			for (int j = 0; j < 80; j++)
			{
				for (int k = 0 ; k<4 ; k++)
 488:	20 16       	cp	r2, r16
 48a:	31 06       	cpc	r3, r17
 48c:	81 f7       	brne	.-32     	; 0x46e <main+0x11a>
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	e9 1a       	sub	r14, r25
 492:	f1 08       	sbc	r15, r1
			tot_overflow = 0;
		}
		else if (tot_overflow >= 122)			//approximately 2s
		{
			encode(Irms);
			for (int j = 0; j < 80; j++)
 494:	11 f0       	breq	.+4      	; 0x49a <main+0x146>
 496:	16 01       	movw	r2, r12
 498:	ea cf       	rjmp	.-44     	; 0x46e <main+0x11a>
				{
					uart_transmit(numArray[k]);
					_delay_ms(5);
				}
			}
			tot_overflow = 244;
 49a:	50 92 0e 01 	sts	0x010E, r5
 49e:	24 c0       	rjmp	.+72     	; 0x4e8 <main+0x194>
		}		
		else
		{
			encode(Vrms);						//this will display the Vrms
 4a0:	69 81       	ldd	r22, Y+1	; 0x01
 4a2:	7a 81       	ldd	r23, Y+2	; 0x02
 4a4:	8b 81       	ldd	r24, Y+3	; 0x03
 4a6:	9c 81       	ldd	r25, Y+4	; 0x04
 4a8:	0e 94 6e 00 	call	0xdc	; 0xdc <encode>
 4ac:	0f 2e       	mov	r0, r31
 4ae:	f0 e5       	ldi	r31, 0x50	; 80
 4b0:	ef 2e       	mov	r14, r31
 4b2:	f1 2c       	mov	r15, r1
 4b4:	f0 2d       	mov	r31, r0
 4b6:	14 c0       	rjmp	.+40     	; 0x4e0 <main+0x18c>
			for (int j = 0; j < 80; j++)
			{
				for (int k = 0 ; k<4 ; k++)
				{
					uart_transmit(numArray[k]);
 4b8:	f1 01       	movw	r30, r2
 4ba:	80 81       	ld	r24, Z
 4bc:	f2 e0       	ldi	r31, 0x02	; 2
 4be:	2f 0e       	add	r2, r31
 4c0:	31 1c       	adc	r3, r1
 4c2:	0e 94 62 00 	call	0xc4	; 0xc4 <uart_transmit>
 4c6:	8f e1       	ldi	r24, 0x1F	; 31
 4c8:	9e e4       	ldi	r25, 0x4E	; 78
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <main+0x176>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <main+0x17c>
 4d0:	00 00       	nop
		else
		{
			encode(Vrms);						//this will display the Vrms
			for (int j = 0; j < 80; j++)
			{
				for (int k = 0 ; k<4 ; k++)
 4d2:	20 16       	cp	r2, r16
 4d4:	31 06       	cpc	r3, r17
 4d6:	81 f7       	brne	.-32     	; 0x4b8 <main+0x164>
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	e9 1a       	sub	r14, r25
 4dc:	f1 08       	sbc	r15, r1
			tot_overflow = 244;
		}		
		else
		{
			encode(Vrms);						//this will display the Vrms
			for (int j = 0; j < 80; j++)
 4de:	11 f0       	breq	.+4      	; 0x4e4 <main+0x190>
 4e0:	16 01       	movw	r2, r12
 4e2:	ea cf       	rjmp	.-44     	; 0x4b8 <main+0x164>
				{
					uart_transmit(numArray[k]);
					_delay_ms(5);
				}
			}
			tot_overflow = 122;
 4e4:	40 92 0e 01 	sts	0x010E, r4

		/*LED blinks every 1s when 25%<power
		* blinks every 0.50s when 25%<power<50%
		* blinks every 0.33s when 50%<power<75%
		* constantly on when 75%<power<100% */
		if (power < 2.125) {				//power < 25%
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	48 e0       	ldi	r20, 0x08	; 8
 4ee:	50 e4       	ldi	r21, 0x40	; 64
 4f0:	c5 01       	movw	r24, r10
 4f2:	b4 01       	movw	r22, r8
 4f4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__cmpsf2>
 4f8:	88 23       	and	r24, r24
 4fa:	84 f4       	brge	.+32     	; 0x51c <main+0x1c8>
			//delay 1s
			if (tot_overflow >= 61)
 4fc:	80 91 0e 01 	lds	r24, 0x010E
 500:	8d 33       	cpi	r24, 0x3D	; 61
 502:	08 f4       	brcc	.+2      	; 0x506 <main+0x1b2>
 504:	4f cf       	rjmp	.-354    	; 0x3a4 <main+0x50>
			{
				if (TCNT0 >= 250)
 506:	86 b5       	in	r24, 0x26	; 38
 508:	8a 3f       	cpi	r24, 0xFA	; 250
 50a:	08 f4       	brcc	.+2      	; 0x50e <main+0x1ba>
 50c:	4b cf       	rjmp	.-362    	; 0x3a4 <main+0x50>
				{
					PORTB ^= (1 << 5);		//toggles the led every 1s
 50e:	85 b1       	in	r24, 0x05	; 5
 510:	86 25       	eor	r24, r6
 512:	85 b9       	out	0x05, r24	; 5
					TCNT0 = 0;				//reset counter
 514:	16 bc       	out	0x26, r1	; 38
					tot_overflow = 0;		//reset overflow counter
 516:	10 92 0e 01 	sts	0x010E, r1
 51a:	44 cf       	rjmp	.-376    	; 0x3a4 <main+0x50>
				}
			}
		} else if ((power < 4.25) & (power >= 2.125)) { //20% < power < 50%
 51c:	f7 2c       	mov	r15, r7
 51e:	20 e0       	ldi	r18, 0x00	; 0
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	48 e0       	ldi	r20, 0x08	; 8
 524:	50 e4       	ldi	r21, 0x40	; 64
 526:	c5 01       	movw	r24, r10
 528:	b4 01       	movw	r22, r8
 52a:	0e 94 b0 04 	call	0x960	; 0x960 <__gesf2>
 52e:	88 23       	and	r24, r24
 530:	0c f4       	brge	.+2      	; 0x534 <main+0x1e0>
 532:	f1 2c       	mov	r15, r1
 534:	ff 20       	and	r15, r15
 536:	e1 f0       	breq	.+56     	; 0x570 <main+0x21c>
 538:	20 e0       	ldi	r18, 0x00	; 0
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	48 e8       	ldi	r20, 0x88	; 136
 53e:	50 e4       	ldi	r21, 0x40	; 64
 540:	c5 01       	movw	r24, r10
 542:	b4 01       	movw	r22, r8
 544:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__cmpsf2>
 548:	88 0f       	add	r24, r24
 54a:	88 0b       	sbc	r24, r24
 54c:	87 21       	and	r24, r7
 54e:	81 f0       	breq	.+32     	; 0x570 <main+0x21c>
			//delay 0.5s
			if (tot_overflow >= 31)
 550:	80 91 0e 01 	lds	r24, 0x010E
 554:	8f 31       	cpi	r24, 0x1F	; 31
 556:	08 f4       	brcc	.+2      	; 0x55a <main+0x206>
 558:	25 cf       	rjmp	.-438    	; 0x3a4 <main+0x50>
			{
				if (TCNT0 >= 250)
 55a:	86 b5       	in	r24, 0x26	; 38
 55c:	8a 3f       	cpi	r24, 0xFA	; 250
 55e:	08 f4       	brcc	.+2      	; 0x562 <main+0x20e>
 560:	21 cf       	rjmp	.-446    	; 0x3a4 <main+0x50>
				{
					PORTB ^= (1 << 5);		//toggles the led every 0.5s
 562:	85 b1       	in	r24, 0x05	; 5
 564:	86 25       	eor	r24, r6
 566:	85 b9       	out	0x05, r24	; 5
					TCNT0 = 0;				//reset counter
 568:	16 bc       	out	0x26, r1	; 38
					tot_overflow = 0;		//reset overflow counter
 56a:	10 92 0e 01 	sts	0x010E, r1
 56e:	1a cf       	rjmp	.-460    	; 0x3a4 <main+0x50>
				}
			}
		} else if ((power < 6.38) & (power >= 4.25)) { //20% < power < 50%
 570:	f7 2c       	mov	r15, r7
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	48 e8       	ldi	r20, 0x88	; 136
 578:	50 e4       	ldi	r21, 0x40	; 64
 57a:	c5 01       	movw	r24, r10
 57c:	b4 01       	movw	r22, r8
 57e:	0e 94 b0 04 	call	0x960	; 0x960 <__gesf2>
 582:	88 23       	and	r24, r24
 584:	0c f4       	brge	.+2      	; 0x588 <main+0x234>
 586:	f1 2c       	mov	r15, r1
 588:	ff 20       	and	r15, r15
 58a:	e1 f0       	breq	.+56     	; 0x5c4 <main+0x270>
 58c:	26 ef       	ldi	r18, 0xF6	; 246
 58e:	38 e2       	ldi	r19, 0x28	; 40
 590:	4c ec       	ldi	r20, 0xCC	; 204
 592:	50 e4       	ldi	r21, 0x40	; 64
 594:	c5 01       	movw	r24, r10
 596:	b4 01       	movw	r22, r8
 598:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__cmpsf2>
 59c:	88 0f       	add	r24, r24
 59e:	88 0b       	sbc	r24, r24
 5a0:	87 21       	and	r24, r7
 5a2:	81 f0       	breq	.+32     	; 0x5c4 <main+0x270>
			//delay 0.333s
			if (tot_overflow >= 15)
 5a4:	80 91 0e 01 	lds	r24, 0x010E
 5a8:	8f 30       	cpi	r24, 0x0F	; 15
 5aa:	08 f4       	brcc	.+2      	; 0x5ae <main+0x25a>
 5ac:	fb ce       	rjmp	.-522    	; 0x3a4 <main+0x50>
			{
				if (TCNT0 >= 250)
 5ae:	86 b5       	in	r24, 0x26	; 38
 5b0:	8a 3f       	cpi	r24, 0xFA	; 250
 5b2:	08 f4       	brcc	.+2      	; 0x5b6 <main+0x262>
 5b4:	f7 ce       	rjmp	.-530    	; 0x3a4 <main+0x50>
				{
					PORTB ^= (1 << 5);    //toggles the led every 0.33s
 5b6:	85 b1       	in	r24, 0x05	; 5
 5b8:	86 25       	eor	r24, r6
 5ba:	85 b9       	out	0x05, r24	; 5
					TCNT0 = 0;            //reset counter
 5bc:	16 bc       	out	0x26, r1	; 38
					tot_overflow = 0;     //reset overflow counter
 5be:	10 92 0e 01 	sts	0x010E, r1
 5c2:	f0 ce       	rjmp	.-544    	; 0x3a4 <main+0x50>
				}
			}
		} else { //(power >= 6.38)
			PORTB |= (1 << 5);    //keeps the led on
 5c4:	2d 9a       	sbi	0x05, 5	; 5
 5c6:	ee ce       	rjmp	.-548    	; 0x3a4 <main+0x50>

000005c8 <__subsf3>:
 5c8:	50 58       	subi	r21, 0x80	; 128

000005ca <__addsf3>:
 5ca:	bb 27       	eor	r27, r27
 5cc:	aa 27       	eor	r26, r26
 5ce:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__addsf3x>
 5d2:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_round>
 5d6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fp_pscA>
 5da:	38 f0       	brcs	.+14     	; 0x5ea <__addsf3+0x20>
 5dc:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_pscB>
 5e0:	20 f0       	brcs	.+8      	; 0x5ea <__addsf3+0x20>
 5e2:	39 f4       	brne	.+14     	; 0x5f2 <__addsf3+0x28>
 5e4:	9f 3f       	cpi	r25, 0xFF	; 255
 5e6:	19 f4       	brne	.+6      	; 0x5ee <__addsf3+0x24>
 5e8:	26 f4       	brtc	.+8      	; 0x5f2 <__addsf3+0x28>
 5ea:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_nan>
 5ee:	0e f4       	brtc	.+2      	; 0x5f2 <__addsf3+0x28>
 5f0:	e0 95       	com	r30
 5f2:	e7 fb       	bst	r30, 7
 5f4:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__fp_inf>

000005f8 <__addsf3x>:
 5f8:	e9 2f       	mov	r30, r25
 5fa:	0e 94 87 04 	call	0x90e	; 0x90e <__fp_split3>
 5fe:	58 f3       	brcs	.-42     	; 0x5d6 <__addsf3+0xc>
 600:	ba 17       	cp	r27, r26
 602:	62 07       	cpc	r22, r18
 604:	73 07       	cpc	r23, r19
 606:	84 07       	cpc	r24, r20
 608:	95 07       	cpc	r25, r21
 60a:	20 f0       	brcs	.+8      	; 0x614 <__addsf3x+0x1c>
 60c:	79 f4       	brne	.+30     	; 0x62c <__addsf3x+0x34>
 60e:	a6 f5       	brtc	.+104    	; 0x678 <__addsf3x+0x80>
 610:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_zero>
 614:	0e f4       	brtc	.+2      	; 0x618 <__addsf3x+0x20>
 616:	e0 95       	com	r30
 618:	0b 2e       	mov	r0, r27
 61a:	ba 2f       	mov	r27, r26
 61c:	a0 2d       	mov	r26, r0
 61e:	0b 01       	movw	r0, r22
 620:	b9 01       	movw	r22, r18
 622:	90 01       	movw	r18, r0
 624:	0c 01       	movw	r0, r24
 626:	ca 01       	movw	r24, r20
 628:	a0 01       	movw	r20, r0
 62a:	11 24       	eor	r1, r1
 62c:	ff 27       	eor	r31, r31
 62e:	59 1b       	sub	r21, r25
 630:	99 f0       	breq	.+38     	; 0x658 <__addsf3x+0x60>
 632:	59 3f       	cpi	r21, 0xF9	; 249
 634:	50 f4       	brcc	.+20     	; 0x64a <__addsf3x+0x52>
 636:	50 3e       	cpi	r21, 0xE0	; 224
 638:	68 f1       	brcs	.+90     	; 0x694 <__addsf3x+0x9c>
 63a:	1a 16       	cp	r1, r26
 63c:	f0 40       	sbci	r31, 0x00	; 0
 63e:	a2 2f       	mov	r26, r18
 640:	23 2f       	mov	r18, r19
 642:	34 2f       	mov	r19, r20
 644:	44 27       	eor	r20, r20
 646:	58 5f       	subi	r21, 0xF8	; 248
 648:	f3 cf       	rjmp	.-26     	; 0x630 <__addsf3x+0x38>
 64a:	46 95       	lsr	r20
 64c:	37 95       	ror	r19
 64e:	27 95       	ror	r18
 650:	a7 95       	ror	r26
 652:	f0 40       	sbci	r31, 0x00	; 0
 654:	53 95       	inc	r21
 656:	c9 f7       	brne	.-14     	; 0x64a <__addsf3x+0x52>
 658:	7e f4       	brtc	.+30     	; 0x678 <__addsf3x+0x80>
 65a:	1f 16       	cp	r1, r31
 65c:	ba 0b       	sbc	r27, r26
 65e:	62 0b       	sbc	r22, r18
 660:	73 0b       	sbc	r23, r19
 662:	84 0b       	sbc	r24, r20
 664:	ba f0       	brmi	.+46     	; 0x694 <__addsf3x+0x9c>
 666:	91 50       	subi	r25, 0x01	; 1
 668:	a1 f0       	breq	.+40     	; 0x692 <__addsf3x+0x9a>
 66a:	ff 0f       	add	r31, r31
 66c:	bb 1f       	adc	r27, r27
 66e:	66 1f       	adc	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	c2 f7       	brpl	.-16     	; 0x666 <__addsf3x+0x6e>
 676:	0e c0       	rjmp	.+28     	; 0x694 <__addsf3x+0x9c>
 678:	ba 0f       	add	r27, r26
 67a:	62 1f       	adc	r22, r18
 67c:	73 1f       	adc	r23, r19
 67e:	84 1f       	adc	r24, r20
 680:	48 f4       	brcc	.+18     	; 0x694 <__addsf3x+0x9c>
 682:	87 95       	ror	r24
 684:	77 95       	ror	r23
 686:	67 95       	ror	r22
 688:	b7 95       	ror	r27
 68a:	f7 95       	ror	r31
 68c:	9e 3f       	cpi	r25, 0xFE	; 254
 68e:	08 f0       	brcs	.+2      	; 0x692 <__addsf3x+0x9a>
 690:	b0 cf       	rjmp	.-160    	; 0x5f2 <__addsf3+0x28>
 692:	93 95       	inc	r25
 694:	88 0f       	add	r24, r24
 696:	08 f0       	brcs	.+2      	; 0x69a <__addsf3x+0xa2>
 698:	99 27       	eor	r25, r25
 69a:	ee 0f       	add	r30, r30
 69c:	97 95       	ror	r25
 69e:	87 95       	ror	r24
 6a0:	08 95       	ret

000006a2 <__cmpsf2>:
 6a2:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_cmp>
 6a6:	08 f4       	brcc	.+2      	; 0x6aa <__cmpsf2+0x8>
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	08 95       	ret

000006ac <__divsf3>:
 6ac:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__divsf3x>
 6b0:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_round>
 6b4:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_pscB>
 6b8:	58 f0       	brcs	.+22     	; 0x6d0 <__divsf3+0x24>
 6ba:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fp_pscA>
 6be:	40 f0       	brcs	.+16     	; 0x6d0 <__divsf3+0x24>
 6c0:	29 f4       	brne	.+10     	; 0x6cc <__divsf3+0x20>
 6c2:	5f 3f       	cpi	r21, 0xFF	; 255
 6c4:	29 f0       	breq	.+10     	; 0x6d0 <__divsf3+0x24>
 6c6:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__fp_inf>
 6ca:	51 11       	cpse	r21, r1
 6cc:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_szero>
 6d0:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_nan>

000006d4 <__divsf3x>:
 6d4:	0e 94 87 04 	call	0x90e	; 0x90e <__fp_split3>
 6d8:	68 f3       	brcs	.-38     	; 0x6b4 <__divsf3+0x8>

000006da <__divsf3_pse>:
 6da:	99 23       	and	r25, r25
 6dc:	b1 f3       	breq	.-20     	; 0x6ca <__divsf3+0x1e>
 6de:	55 23       	and	r21, r21
 6e0:	91 f3       	breq	.-28     	; 0x6c6 <__divsf3+0x1a>
 6e2:	95 1b       	sub	r25, r21
 6e4:	55 0b       	sbc	r21, r21
 6e6:	bb 27       	eor	r27, r27
 6e8:	aa 27       	eor	r26, r26
 6ea:	62 17       	cp	r22, r18
 6ec:	73 07       	cpc	r23, r19
 6ee:	84 07       	cpc	r24, r20
 6f0:	38 f0       	brcs	.+14     	; 0x700 <__divsf3_pse+0x26>
 6f2:	9f 5f       	subi	r25, 0xFF	; 255
 6f4:	5f 4f       	sbci	r21, 0xFF	; 255
 6f6:	22 0f       	add	r18, r18
 6f8:	33 1f       	adc	r19, r19
 6fa:	44 1f       	adc	r20, r20
 6fc:	aa 1f       	adc	r26, r26
 6fe:	a9 f3       	breq	.-22     	; 0x6ea <__divsf3_pse+0x10>
 700:	35 d0       	rcall	.+106    	; 0x76c <__divsf3_pse+0x92>
 702:	0e 2e       	mov	r0, r30
 704:	3a f0       	brmi	.+14     	; 0x714 <__divsf3_pse+0x3a>
 706:	e0 e8       	ldi	r30, 0x80	; 128
 708:	32 d0       	rcall	.+100    	; 0x76e <__divsf3_pse+0x94>
 70a:	91 50       	subi	r25, 0x01	; 1
 70c:	50 40       	sbci	r21, 0x00	; 0
 70e:	e6 95       	lsr	r30
 710:	00 1c       	adc	r0, r0
 712:	ca f7       	brpl	.-14     	; 0x706 <__divsf3_pse+0x2c>
 714:	2b d0       	rcall	.+86     	; 0x76c <__divsf3_pse+0x92>
 716:	fe 2f       	mov	r31, r30
 718:	29 d0       	rcall	.+82     	; 0x76c <__divsf3_pse+0x92>
 71a:	66 0f       	add	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	88 1f       	adc	r24, r24
 720:	bb 1f       	adc	r27, r27
 722:	26 17       	cp	r18, r22
 724:	37 07       	cpc	r19, r23
 726:	48 07       	cpc	r20, r24
 728:	ab 07       	cpc	r26, r27
 72a:	b0 e8       	ldi	r27, 0x80	; 128
 72c:	09 f0       	breq	.+2      	; 0x730 <__divsf3_pse+0x56>
 72e:	bb 0b       	sbc	r27, r27
 730:	80 2d       	mov	r24, r0
 732:	bf 01       	movw	r22, r30
 734:	ff 27       	eor	r31, r31
 736:	93 58       	subi	r25, 0x83	; 131
 738:	5f 4f       	sbci	r21, 0xFF	; 255
 73a:	3a f0       	brmi	.+14     	; 0x74a <__divsf3_pse+0x70>
 73c:	9e 3f       	cpi	r25, 0xFE	; 254
 73e:	51 05       	cpc	r21, r1
 740:	78 f0       	brcs	.+30     	; 0x760 <__divsf3_pse+0x86>
 742:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__fp_inf>
 746:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_szero>
 74a:	5f 3f       	cpi	r21, 0xFF	; 255
 74c:	e4 f3       	brlt	.-8      	; 0x746 <__divsf3_pse+0x6c>
 74e:	98 3e       	cpi	r25, 0xE8	; 232
 750:	d4 f3       	brlt	.-12     	; 0x746 <__divsf3_pse+0x6c>
 752:	86 95       	lsr	r24
 754:	77 95       	ror	r23
 756:	67 95       	ror	r22
 758:	b7 95       	ror	r27
 75a:	f7 95       	ror	r31
 75c:	9f 5f       	subi	r25, 0xFF	; 255
 75e:	c9 f7       	brne	.-14     	; 0x752 <__divsf3_pse+0x78>
 760:	88 0f       	add	r24, r24
 762:	91 1d       	adc	r25, r1
 764:	96 95       	lsr	r25
 766:	87 95       	ror	r24
 768:	97 f9       	bld	r25, 7
 76a:	08 95       	ret
 76c:	e1 e0       	ldi	r30, 0x01	; 1
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	88 1f       	adc	r24, r24
 774:	bb 1f       	adc	r27, r27
 776:	62 17       	cp	r22, r18
 778:	73 07       	cpc	r23, r19
 77a:	84 07       	cpc	r24, r20
 77c:	ba 07       	cpc	r27, r26
 77e:	20 f0       	brcs	.+8      	; 0x788 <__divsf3_pse+0xae>
 780:	62 1b       	sub	r22, r18
 782:	73 0b       	sbc	r23, r19
 784:	84 0b       	sbc	r24, r20
 786:	ba 0b       	sbc	r27, r26
 788:	ee 1f       	adc	r30, r30
 78a:	88 f7       	brcc	.-30     	; 0x76e <__divsf3_pse+0x94>
 78c:	e0 95       	com	r30
 78e:	08 95       	ret

00000790 <__fixsfsi>:
 790:	0e 94 cf 03 	call	0x79e	; 0x79e <__fixunssfsi>
 794:	68 94       	set
 796:	b1 11       	cpse	r27, r1
 798:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_szero>
 79c:	08 95       	ret

0000079e <__fixunssfsi>:
 79e:	0e 94 8f 04 	call	0x91e	; 0x91e <__fp_splitA>
 7a2:	88 f0       	brcs	.+34     	; 0x7c6 <__fixunssfsi+0x28>
 7a4:	9f 57       	subi	r25, 0x7F	; 127
 7a6:	98 f0       	brcs	.+38     	; 0x7ce <__fixunssfsi+0x30>
 7a8:	b9 2f       	mov	r27, r25
 7aa:	99 27       	eor	r25, r25
 7ac:	b7 51       	subi	r27, 0x17	; 23
 7ae:	b0 f0       	brcs	.+44     	; 0x7dc <__fixunssfsi+0x3e>
 7b0:	e1 f0       	breq	.+56     	; 0x7ea <__fixunssfsi+0x4c>
 7b2:	66 0f       	add	r22, r22
 7b4:	77 1f       	adc	r23, r23
 7b6:	88 1f       	adc	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	1a f0       	brmi	.+6      	; 0x7c2 <__fixunssfsi+0x24>
 7bc:	ba 95       	dec	r27
 7be:	c9 f7       	brne	.-14     	; 0x7b2 <__fixunssfsi+0x14>
 7c0:	14 c0       	rjmp	.+40     	; 0x7ea <__fixunssfsi+0x4c>
 7c2:	b1 30       	cpi	r27, 0x01	; 1
 7c4:	91 f0       	breq	.+36     	; 0x7ea <__fixunssfsi+0x4c>
 7c6:	0e 94 a9 04 	call	0x952	; 0x952 <__fp_zero>
 7ca:	b1 e0       	ldi	r27, 0x01	; 1
 7cc:	08 95       	ret
 7ce:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_zero>
 7d2:	67 2f       	mov	r22, r23
 7d4:	78 2f       	mov	r23, r24
 7d6:	88 27       	eor	r24, r24
 7d8:	b8 5f       	subi	r27, 0xF8	; 248
 7da:	39 f0       	breq	.+14     	; 0x7ea <__fixunssfsi+0x4c>
 7dc:	b9 3f       	cpi	r27, 0xF9	; 249
 7de:	cc f3       	brlt	.-14     	; 0x7d2 <__fixunssfsi+0x34>
 7e0:	86 95       	lsr	r24
 7e2:	77 95       	ror	r23
 7e4:	67 95       	ror	r22
 7e6:	b3 95       	inc	r27
 7e8:	d9 f7       	brne	.-10     	; 0x7e0 <__fixunssfsi+0x42>
 7ea:	3e f4       	brtc	.+14     	; 0x7fa <__fixunssfsi+0x5c>
 7ec:	90 95       	com	r25
 7ee:	80 95       	com	r24
 7f0:	70 95       	com	r23
 7f2:	61 95       	neg	r22
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	8f 4f       	sbci	r24, 0xFF	; 255
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	08 95       	ret

000007fc <__floatunsisf>:
 7fc:	e8 94       	clt
 7fe:	09 c0       	rjmp	.+18     	; 0x812 <__floatsisf+0x12>

00000800 <__floatsisf>:
 800:	97 fb       	bst	r25, 7
 802:	3e f4       	brtc	.+14     	; 0x812 <__floatsisf+0x12>
 804:	90 95       	com	r25
 806:	80 95       	com	r24
 808:	70 95       	com	r23
 80a:	61 95       	neg	r22
 80c:	7f 4f       	sbci	r23, 0xFF	; 255
 80e:	8f 4f       	sbci	r24, 0xFF	; 255
 810:	9f 4f       	sbci	r25, 0xFF	; 255
 812:	99 23       	and	r25, r25
 814:	a9 f0       	breq	.+42     	; 0x840 <__floatsisf+0x40>
 816:	f9 2f       	mov	r31, r25
 818:	96 e9       	ldi	r25, 0x96	; 150
 81a:	bb 27       	eor	r27, r27
 81c:	93 95       	inc	r25
 81e:	f6 95       	lsr	r31
 820:	87 95       	ror	r24
 822:	77 95       	ror	r23
 824:	67 95       	ror	r22
 826:	b7 95       	ror	r27
 828:	f1 11       	cpse	r31, r1
 82a:	f8 cf       	rjmp	.-16     	; 0x81c <__floatsisf+0x1c>
 82c:	fa f4       	brpl	.+62     	; 0x86c <__floatsisf+0x6c>
 82e:	bb 0f       	add	r27, r27
 830:	11 f4       	brne	.+4      	; 0x836 <__floatsisf+0x36>
 832:	60 ff       	sbrs	r22, 0
 834:	1b c0       	rjmp	.+54     	; 0x86c <__floatsisf+0x6c>
 836:	6f 5f       	subi	r22, 0xFF	; 255
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	8f 4f       	sbci	r24, 0xFF	; 255
 83c:	9f 4f       	sbci	r25, 0xFF	; 255
 83e:	16 c0       	rjmp	.+44     	; 0x86c <__floatsisf+0x6c>
 840:	88 23       	and	r24, r24
 842:	11 f0       	breq	.+4      	; 0x848 <__floatsisf+0x48>
 844:	96 e9       	ldi	r25, 0x96	; 150
 846:	11 c0       	rjmp	.+34     	; 0x86a <__floatsisf+0x6a>
 848:	77 23       	and	r23, r23
 84a:	21 f0       	breq	.+8      	; 0x854 <__floatsisf+0x54>
 84c:	9e e8       	ldi	r25, 0x8E	; 142
 84e:	87 2f       	mov	r24, r23
 850:	76 2f       	mov	r23, r22
 852:	05 c0       	rjmp	.+10     	; 0x85e <__floatsisf+0x5e>
 854:	66 23       	and	r22, r22
 856:	71 f0       	breq	.+28     	; 0x874 <__floatsisf+0x74>
 858:	96 e8       	ldi	r25, 0x86	; 134
 85a:	86 2f       	mov	r24, r22
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	60 e0       	ldi	r22, 0x00	; 0
 860:	2a f0       	brmi	.+10     	; 0x86c <__floatsisf+0x6c>
 862:	9a 95       	dec	r25
 864:	66 0f       	add	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	da f7       	brpl	.-10     	; 0x862 <__floatsisf+0x62>
 86c:	88 0f       	add	r24, r24
 86e:	96 95       	lsr	r25
 870:	87 95       	ror	r24
 872:	97 f9       	bld	r25, 7
 874:	08 95       	ret

00000876 <__fp_cmp>:
 876:	99 0f       	add	r25, r25
 878:	00 08       	sbc	r0, r0
 87a:	55 0f       	add	r21, r21
 87c:	aa 0b       	sbc	r26, r26
 87e:	e0 e8       	ldi	r30, 0x80	; 128
 880:	fe ef       	ldi	r31, 0xFE	; 254
 882:	16 16       	cp	r1, r22
 884:	17 06       	cpc	r1, r23
 886:	e8 07       	cpc	r30, r24
 888:	f9 07       	cpc	r31, r25
 88a:	c0 f0       	brcs	.+48     	; 0x8bc <__fp_cmp+0x46>
 88c:	12 16       	cp	r1, r18
 88e:	13 06       	cpc	r1, r19
 890:	e4 07       	cpc	r30, r20
 892:	f5 07       	cpc	r31, r21
 894:	98 f0       	brcs	.+38     	; 0x8bc <__fp_cmp+0x46>
 896:	62 1b       	sub	r22, r18
 898:	73 0b       	sbc	r23, r19
 89a:	84 0b       	sbc	r24, r20
 89c:	95 0b       	sbc	r25, r21
 89e:	39 f4       	brne	.+14     	; 0x8ae <__fp_cmp+0x38>
 8a0:	0a 26       	eor	r0, r26
 8a2:	61 f0       	breq	.+24     	; 0x8bc <__fp_cmp+0x46>
 8a4:	23 2b       	or	r18, r19
 8a6:	24 2b       	or	r18, r20
 8a8:	25 2b       	or	r18, r21
 8aa:	21 f4       	brne	.+8      	; 0x8b4 <__fp_cmp+0x3e>
 8ac:	08 95       	ret
 8ae:	0a 26       	eor	r0, r26
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <__fp_cmp+0x3e>
 8b2:	a1 40       	sbci	r26, 0x01	; 1
 8b4:	a6 95       	lsr	r26
 8b6:	8f ef       	ldi	r24, 0xFF	; 255
 8b8:	81 1d       	adc	r24, r1
 8ba:	81 1d       	adc	r24, r1
 8bc:	08 95       	ret

000008be <__fp_inf>:
 8be:	97 f9       	bld	r25, 7
 8c0:	9f 67       	ori	r25, 0x7F	; 127
 8c2:	80 e8       	ldi	r24, 0x80	; 128
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	60 e0       	ldi	r22, 0x00	; 0
 8c8:	08 95       	ret

000008ca <__fp_nan>:
 8ca:	9f ef       	ldi	r25, 0xFF	; 255
 8cc:	80 ec       	ldi	r24, 0xC0	; 192
 8ce:	08 95       	ret

000008d0 <__fp_pscA>:
 8d0:	00 24       	eor	r0, r0
 8d2:	0a 94       	dec	r0
 8d4:	16 16       	cp	r1, r22
 8d6:	17 06       	cpc	r1, r23
 8d8:	18 06       	cpc	r1, r24
 8da:	09 06       	cpc	r0, r25
 8dc:	08 95       	ret

000008de <__fp_pscB>:
 8de:	00 24       	eor	r0, r0
 8e0:	0a 94       	dec	r0
 8e2:	12 16       	cp	r1, r18
 8e4:	13 06       	cpc	r1, r19
 8e6:	14 06       	cpc	r1, r20
 8e8:	05 06       	cpc	r0, r21
 8ea:	08 95       	ret

000008ec <__fp_round>:
 8ec:	09 2e       	mov	r0, r25
 8ee:	03 94       	inc	r0
 8f0:	00 0c       	add	r0, r0
 8f2:	11 f4       	brne	.+4      	; 0x8f8 <__fp_round+0xc>
 8f4:	88 23       	and	r24, r24
 8f6:	52 f0       	brmi	.+20     	; 0x90c <__stack+0xd>
 8f8:	bb 0f       	add	r27, r27
 8fa:	40 f4       	brcc	.+16     	; 0x90c <__stack+0xd>
 8fc:	bf 2b       	or	r27, r31
 8fe:	11 f4       	brne	.+4      	; 0x904 <__stack+0x5>
 900:	60 ff       	sbrs	r22, 0
 902:	04 c0       	rjmp	.+8      	; 0x90c <__stack+0xd>
 904:	6f 5f       	subi	r22, 0xFF	; 255
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	8f 4f       	sbci	r24, 0xFF	; 255
 90a:	9f 4f       	sbci	r25, 0xFF	; 255
 90c:	08 95       	ret

0000090e <__fp_split3>:
 90e:	57 fd       	sbrc	r21, 7
 910:	90 58       	subi	r25, 0x80	; 128
 912:	44 0f       	add	r20, r20
 914:	55 1f       	adc	r21, r21
 916:	59 f0       	breq	.+22     	; 0x92e <__fp_splitA+0x10>
 918:	5f 3f       	cpi	r21, 0xFF	; 255
 91a:	71 f0       	breq	.+28     	; 0x938 <__fp_splitA+0x1a>
 91c:	47 95       	ror	r20

0000091e <__fp_splitA>:
 91e:	88 0f       	add	r24, r24
 920:	97 fb       	bst	r25, 7
 922:	99 1f       	adc	r25, r25
 924:	61 f0       	breq	.+24     	; 0x93e <__fp_splitA+0x20>
 926:	9f 3f       	cpi	r25, 0xFF	; 255
 928:	79 f0       	breq	.+30     	; 0x948 <__fp_splitA+0x2a>
 92a:	87 95       	ror	r24
 92c:	08 95       	ret
 92e:	12 16       	cp	r1, r18
 930:	13 06       	cpc	r1, r19
 932:	14 06       	cpc	r1, r20
 934:	55 1f       	adc	r21, r21
 936:	f2 cf       	rjmp	.-28     	; 0x91c <__fp_split3+0xe>
 938:	46 95       	lsr	r20
 93a:	f1 df       	rcall	.-30     	; 0x91e <__fp_splitA>
 93c:	08 c0       	rjmp	.+16     	; 0x94e <__fp_splitA+0x30>
 93e:	16 16       	cp	r1, r22
 940:	17 06       	cpc	r1, r23
 942:	18 06       	cpc	r1, r24
 944:	99 1f       	adc	r25, r25
 946:	f1 cf       	rjmp	.-30     	; 0x92a <__fp_splitA+0xc>
 948:	86 95       	lsr	r24
 94a:	71 05       	cpc	r23, r1
 94c:	61 05       	cpc	r22, r1
 94e:	08 94       	sec
 950:	08 95       	ret

00000952 <__fp_zero>:
 952:	e8 94       	clt

00000954 <__fp_szero>:
 954:	bb 27       	eor	r27, r27
 956:	66 27       	eor	r22, r22
 958:	77 27       	eor	r23, r23
 95a:	cb 01       	movw	r24, r22
 95c:	97 f9       	bld	r25, 7
 95e:	08 95       	ret

00000960 <__gesf2>:
 960:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_cmp>
 964:	08 f4       	brcc	.+2      	; 0x968 <__gesf2+0x8>
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	08 95       	ret

0000096a <__mulsf3>:
 96a:	0e 94 c8 04 	call	0x990	; 0x990 <__mulsf3x>
 96e:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_round>
 972:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fp_pscA>
 976:	38 f0       	brcs	.+14     	; 0x986 <__mulsf3+0x1c>
 978:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_pscB>
 97c:	20 f0       	brcs	.+8      	; 0x986 <__mulsf3+0x1c>
 97e:	95 23       	and	r25, r21
 980:	11 f0       	breq	.+4      	; 0x986 <__mulsf3+0x1c>
 982:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__fp_inf>
 986:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_nan>
 98a:	11 24       	eor	r1, r1
 98c:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_szero>

00000990 <__mulsf3x>:
 990:	0e 94 87 04 	call	0x90e	; 0x90e <__fp_split3>
 994:	70 f3       	brcs	.-36     	; 0x972 <__mulsf3+0x8>

00000996 <__mulsf3_pse>:
 996:	95 9f       	mul	r25, r21
 998:	c1 f3       	breq	.-16     	; 0x98a <__mulsf3+0x20>
 99a:	95 0f       	add	r25, r21
 99c:	50 e0       	ldi	r21, 0x00	; 0
 99e:	55 1f       	adc	r21, r21
 9a0:	62 9f       	mul	r22, r18
 9a2:	f0 01       	movw	r30, r0
 9a4:	72 9f       	mul	r23, r18
 9a6:	bb 27       	eor	r27, r27
 9a8:	f0 0d       	add	r31, r0
 9aa:	b1 1d       	adc	r27, r1
 9ac:	63 9f       	mul	r22, r19
 9ae:	aa 27       	eor	r26, r26
 9b0:	f0 0d       	add	r31, r0
 9b2:	b1 1d       	adc	r27, r1
 9b4:	aa 1f       	adc	r26, r26
 9b6:	64 9f       	mul	r22, r20
 9b8:	66 27       	eor	r22, r22
 9ba:	b0 0d       	add	r27, r0
 9bc:	a1 1d       	adc	r26, r1
 9be:	66 1f       	adc	r22, r22
 9c0:	82 9f       	mul	r24, r18
 9c2:	22 27       	eor	r18, r18
 9c4:	b0 0d       	add	r27, r0
 9c6:	a1 1d       	adc	r26, r1
 9c8:	62 1f       	adc	r22, r18
 9ca:	73 9f       	mul	r23, r19
 9cc:	b0 0d       	add	r27, r0
 9ce:	a1 1d       	adc	r26, r1
 9d0:	62 1f       	adc	r22, r18
 9d2:	83 9f       	mul	r24, r19
 9d4:	a0 0d       	add	r26, r0
 9d6:	61 1d       	adc	r22, r1
 9d8:	22 1f       	adc	r18, r18
 9da:	74 9f       	mul	r23, r20
 9dc:	33 27       	eor	r19, r19
 9de:	a0 0d       	add	r26, r0
 9e0:	61 1d       	adc	r22, r1
 9e2:	23 1f       	adc	r18, r19
 9e4:	84 9f       	mul	r24, r20
 9e6:	60 0d       	add	r22, r0
 9e8:	21 1d       	adc	r18, r1
 9ea:	82 2f       	mov	r24, r18
 9ec:	76 2f       	mov	r23, r22
 9ee:	6a 2f       	mov	r22, r26
 9f0:	11 24       	eor	r1, r1
 9f2:	9f 57       	subi	r25, 0x7F	; 127
 9f4:	50 40       	sbci	r21, 0x00	; 0
 9f6:	9a f0       	brmi	.+38     	; 0xa1e <__mulsf3_pse+0x88>
 9f8:	f1 f0       	breq	.+60     	; 0xa36 <__mulsf3_pse+0xa0>
 9fa:	88 23       	and	r24, r24
 9fc:	4a f0       	brmi	.+18     	; 0xa10 <__mulsf3_pse+0x7a>
 9fe:	ee 0f       	add	r30, r30
 a00:	ff 1f       	adc	r31, r31
 a02:	bb 1f       	adc	r27, r27
 a04:	66 1f       	adc	r22, r22
 a06:	77 1f       	adc	r23, r23
 a08:	88 1f       	adc	r24, r24
 a0a:	91 50       	subi	r25, 0x01	; 1
 a0c:	50 40       	sbci	r21, 0x00	; 0
 a0e:	a9 f7       	brne	.-22     	; 0x9fa <__mulsf3_pse+0x64>
 a10:	9e 3f       	cpi	r25, 0xFE	; 254
 a12:	51 05       	cpc	r21, r1
 a14:	80 f0       	brcs	.+32     	; 0xa36 <__mulsf3_pse+0xa0>
 a16:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__fp_inf>
 a1a:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_szero>
 a1e:	5f 3f       	cpi	r21, 0xFF	; 255
 a20:	e4 f3       	brlt	.-8      	; 0xa1a <__mulsf3_pse+0x84>
 a22:	98 3e       	cpi	r25, 0xE8	; 232
 a24:	d4 f3       	brlt	.-12     	; 0xa1a <__mulsf3_pse+0x84>
 a26:	86 95       	lsr	r24
 a28:	77 95       	ror	r23
 a2a:	67 95       	ror	r22
 a2c:	b7 95       	ror	r27
 a2e:	f7 95       	ror	r31
 a30:	e7 95       	ror	r30
 a32:	9f 5f       	subi	r25, 0xFF	; 255
 a34:	c1 f7       	brne	.-16     	; 0xa26 <__mulsf3_pse+0x90>
 a36:	fe 2b       	or	r31, r30
 a38:	88 0f       	add	r24, r24
 a3a:	91 1d       	adc	r25, r1
 a3c:	96 95       	lsr	r25
 a3e:	87 95       	ror	r24
 a40:	97 f9       	bld	r25, 7
 a42:	08 95       	ret

00000a44 <__divmodhi4>:
 a44:	97 fb       	bst	r25, 7
 a46:	07 2e       	mov	r0, r23
 a48:	16 f4       	brtc	.+4      	; 0xa4e <__divmodhi4+0xa>
 a4a:	00 94       	com	r0
 a4c:	07 d0       	rcall	.+14     	; 0xa5c <__divmodhi4_neg1>
 a4e:	77 fd       	sbrc	r23, 7
 a50:	09 d0       	rcall	.+18     	; 0xa64 <__divmodhi4_neg2>
 a52:	0e 94 36 05 	call	0xa6c	; 0xa6c <__udivmodhi4>
 a56:	07 fc       	sbrc	r0, 7
 a58:	05 d0       	rcall	.+10     	; 0xa64 <__divmodhi4_neg2>
 a5a:	3e f4       	brtc	.+14     	; 0xa6a <__divmodhi4_exit>

00000a5c <__divmodhi4_neg1>:
 a5c:	90 95       	com	r25
 a5e:	81 95       	neg	r24
 a60:	9f 4f       	sbci	r25, 0xFF	; 255
 a62:	08 95       	ret

00000a64 <__divmodhi4_neg2>:
 a64:	70 95       	com	r23
 a66:	61 95       	neg	r22
 a68:	7f 4f       	sbci	r23, 0xFF	; 255

00000a6a <__divmodhi4_exit>:
 a6a:	08 95       	ret

00000a6c <__udivmodhi4>:
 a6c:	aa 1b       	sub	r26, r26
 a6e:	bb 1b       	sub	r27, r27
 a70:	51 e1       	ldi	r21, 0x11	; 17
 a72:	07 c0       	rjmp	.+14     	; 0xa82 <__udivmodhi4_ep>

00000a74 <__udivmodhi4_loop>:
 a74:	aa 1f       	adc	r26, r26
 a76:	bb 1f       	adc	r27, r27
 a78:	a6 17       	cp	r26, r22
 a7a:	b7 07       	cpc	r27, r23
 a7c:	10 f0       	brcs	.+4      	; 0xa82 <__udivmodhi4_ep>
 a7e:	a6 1b       	sub	r26, r22
 a80:	b7 0b       	sbc	r27, r23

00000a82 <__udivmodhi4_ep>:
 a82:	88 1f       	adc	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	5a 95       	dec	r21
 a88:	a9 f7       	brne	.-22     	; 0xa74 <__udivmodhi4_loop>
 a8a:	80 95       	com	r24
 a8c:	90 95       	com	r25
 a8e:	bc 01       	movw	r22, r24
 a90:	cd 01       	movw	r24, r26
 a92:	08 95       	ret

00000a94 <_exit>:
 a94:	f8 94       	cli

00000a96 <__stop_program>:
 a96:	ff cf       	rjmp	.-2      	; 0xa96 <__stop_program>
